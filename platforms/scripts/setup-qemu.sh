#!/bin/bash
#
# Copyright (C) 2022, Advanced Micro Devices, Inc. All rights reserved.
# SPDX-License-Identifier: MIT
#

# Exit on error
set -e

# get the absolute location of the setup script
# we expect the config files to be stored in the same directory
realpath=$(readlink -f $0)
script_path=${realpath%/*}

REQUIRED_VARS=(BUILDROOT_LOCATION BUILDROOT_TAG OUTPUT_DIR QEMU_PATH)
ENV_FILE="$script_path/env_config"
BR_CONFIG="$script_path/br_config"
VERBOSE=${VERBOSE:=1}

function corrupt_env()
{
	local bad_var=$1
	echo "Your environment file \"$ENV_FILE\" is corrupt (missing variable \"$bad_var\")"
	echo "Please fix it (or make a new one)"
	exit
}

function validate_env()
{
	for var_name in ${REQUIRED_VARS[*]}; do
		local -n var=$var_name
		[ $VERBOSE ] && echo "validating $var_name=$var"
		[ -v $var ] && corrupt_env $var_name
	done
	return 0
}

# Make a default config file if there isn't one
if [ ! -f "${ENV_FILE}" ]; then
	# generate a default config file
	[ $VERBOSE ] && echo "Generating default config file to ${ENV_FILE}"
	echo "# Autogenerated by $0 on $date, but you can edit this!" > ${ENV_FILE}
	echo "BUILDROOT_LOCATION=../buildroot  # location of the buildroot source tree" >> ${ENV_FILE}
	echo "BUILDROOT_TAG=2021.08.1          # tag (or commit) for buildroot git branch" >> ${ENV_FILE}
	echo "OUTPUT_DIR=buildroot             # where to put buildroot results (kernel + initrd)" >> ${ENV_FILE}
	echo "QEMU_PATH=/usr/bin               # location of QEMU executables (qemu-system-x86_64 and qemu-system-aarch64)" >> ${ENV_FILE}
	echo "IMAGE_PATH=$OUTPUT_DIR/images    # location of executable images (rootfs.ext2)" >> ${ENV_FILE}
	echo "LINUX_LOCATION=../linux          # Custom linux source" >> ${ENV_FILE}
	echo "LINUX_VERSION=5.13               # Linux version" >> ${ENV_FILE}
	echo "ATF_PATH=                        # location of ARM trusted firmware" >> ${ENV_FILE}
	echo "DTB_PATH=                        # Xilinx HW DTB files (not linux kernel DTB files)" >> ${ENV_FILE}
	echo "devids=(\"10ee b034\")             # array of device/vendor ID pairs of assignable devices" >> ${ENV_FILE}
	echo "bdfs=(\"0000:21:00.0\")            # array of bus:device:function ID's of devices to assign" >> ${ENV_FILE}
fi

# Source env variables
echo "Using environment from ${ENV_FILE}"
. "${ENV_FILE}"

validate_env
echo "OK!"

# download buildroot if needed and check out correct tag to a new local branch
[ $VERBOSE ] && echo "checking existence of buildroot project"
if [ ! -d $BUILDROOT_LOCATION ]; then
	[ $VERBOSE ] && echo "Cloning buildroot"
	git clone https://git.busybox.net/buildroot $BUILDROOT_LOCATION
fi

# make sure its on the right tag
[ $VERBOSE ] && echo "checking buildroot tag"
cd $BUILDROOT_LOCATION
tag_val=$(git tag --points-at)
[ $VERBOSE ] && echo "Tag: $tag_val"
if [[ "$tag_val" != ${BUILDROOT_TAG} ]]; then
	[ $VERBOSE ] && echo "Checking out tag $BUILDROOT_TAG"
	git checkout -B air $BUILDROOT_TAG
fi
cd -

# download linux if needed and check out correct tag to a new local branch
echo "linux:" $LINUX_LOCATION
if [[ -v LINUX_LOCATION ]] ; then
	[ $VERBOSE ] && echo "checking existence of external linux source"
	if [[ ! -d $LINUX_LOCATION ]]; then
		[ $VERBOSE ] && echo "Cloning linux"
		git clone https://github.com/torvalds/linux.git $LINUX_LOCATION
	fi
fi

# set up the buildroot output directory
[ $VERBOSE ] && echo "checking for output directory in $OUTPUT_DIR"
if [[ ! -d $OUTPUT_DIR ]]; then
	# if it is a relative path, prepend the current directory
	if [[ ${OUTPUT_DIR:0:1} != "/" ]]; then
		output_dir=$PWD/$OUTPUT_DIR
	else
		output_dir=$OUTPUT_DIR
	fi
	[ $VERBOSE ] && echo "creating buildroot output directory $output_dir"
	make -C $BUILDROOT_LOCATION qemu_x86_64_defconfig O=$output_dir
fi

# update the config file
[ $VERBOSE ] && echo "creating buildroot config file ($BR_CONFIG) with custom linux config"
cp $BR_CONFIG.example $BR_CONFIG
sed -i s,BR2_LINUX_KERNEL_CUSTOM_CONFIG_FILE.*,BR2_LINUX_KERNEL_CUSTOM_CONFIG_FILE=\"$script_path/linux.config\", $BR_CONFIG
cp $BR_CONFIG $OUTPUT_DIR/.config

# give the user further instructions about how to proceed with the build
echo ""
echo "You may customize the config files, then enter the output directory ($OUTPUT_DIR) and type 'make' to start the build"
